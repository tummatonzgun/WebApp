import pandas as pd
import glob
import os
import re

def run_all_years(input_path, output_dir):
    target_years = [2023, 2024, 2025, 2026, 2027]
    print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å {input_path} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ {target_years}")
    # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ä‡∏∑‡πà‡∏≠
    all_files = glob.glob(os.path.join(input_path, "WF size* (UTL1).*"))
    print(f"‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_files)} ‡πÑ‡∏ü‡∏•‡πå")

    # ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
    files_by_year = {}
    for filepath in all_files:
        filename = os.path.basename(filepath)
        match = re.search(r"'(\d{2})", filename)
        if match:
            file_year = 2000 + int(match.group(1))
            if file_year in target_years:
                files_by_year.setdefault(file_year, []).append(filepath)
        else:
            print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏µ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠")

    df_list = []

    for year in sorted(files_by_year):
        for filepath in files_by_year[year]:
            filename = os.path.basename(filepath)
            month_match = re.search(r"WF size ([^ ]+)", filename)
            month = month_match.group(1) if month_match else "Unknown"

            try:
                if filepath.endswith(('.xls', '.xlsx')):
                    df = pd.read_excel(filepath, engine="openpyxl" if filepath.endswith('.xlsx') else None)
                elif filepath.endswith('.csv'):
                    df = pd.read_csv(filepath)
                else:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï: {filename}")
                    continue
            except Exception as e:
                print(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                continue

            df['month'] = month
            df['file_year'] = year
            df_list.append(df)

    if not df_list:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        return

    df_all = pd.concat(df_list, ignore_index=True)

    # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
    required_cols = ['cust_code', 'package_code', 'product_no', 'bom_no', 'assy_pack_type', 'start_date', 'month']
    missing = [c for c in required_cols if c not in df_all.columns]
    if missing:
        print(f"‚ùå ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {missing}")
        return

    df_all = df_all[required_cols + ['file_year']]

    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    month_map = {m: i for i, m in enumerate(month_order, 1)}
    df_all['month_short'] = df_all['month'].str[:3]
    df_all['month_num'] = df_all['month_short'].map(month_map)



    # ‡∏´‡∏≤ Type ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    def get_latest_type(group):
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ Type ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        group_sorted = group.sort_values(
            by=['file_year', 'month_num', 'start_date'], 
            ascending=[False, False, False]
        )
        # ‡πÄ‡∏≠‡∏≤ assy_pack_type ‡πÅ‡∏£‡∏Å (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
        latest_type = group_sorted['assy_pack_type'].iloc[0]
        return latest_type

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á mapping ‡∏Ç‡∏≠‡∏á Type ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
    latest_types = df_all.groupby(['bom_no', 'package_code', 'product_no']).apply(get_latest_type)
    latest_types_dict = latest_types.to_dict()

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° BOM ‚Üí ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà)
    df_all = df_all.sort_values(by=[
        'bom_no', 'package_code', 'product_no',
        'file_year', 'month_num', 'start_date'
    ]).reset_index(drop=True)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Type ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô DataFrame
    df_all['Last_type'] = df_all.apply(
        lambda row: latest_types_dict[(row['bom_no'], row['package_code'], row['product_no'])], 
        axis=1
    )

    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    df_all['start_date'] = pd.to_datetime(df_all['start_date'], errors='coerce').dt.strftime('%d/%m/%Y')\

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    df_to_save = df_all.drop(columns=['month', 'month_num',], errors='ignore')
    df_to_save.rename(columns={'month_short': 'month'}, inplace=True)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, "Last_Type.xlsx")
    df_to_save.to_excel(output_file, index=False)

    print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Type ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {output_file}")
    print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df_to_save)}")
    print(f"üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° BOM ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥: {len(df_to_save.groupby(['bom_no', 'package_code', 'product_no']))}")
    
    return df_to_save

def lookup_last_type(input_bom_file, output_dir):
    # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Last_Type.xlsx
    last_type_path = os.path.join(output_dir, "Last_Type.xlsx")
    if not os.path.exists(last_type_path):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {last_type_path}")
        return

    df_last = pd.read_excel(last_type_path)
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    cols = ['bom_no', 'Last_type']
    df_last = df_last[cols].drop_duplicates()

    # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå bom_no ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    df_bom = pd.read_excel(input_bom_file) if input_bom_file.endswith('.xlsx') else pd.read_csv(input_bom_file)
    if 'bom_no' not in df_bom.columns:
        print("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå bom_no")
        return

    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (merge) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á Last_type
    merge_cols = ['bom_no']
    if 'package_code' in df_bom.columns and 'product_no' in df_bom.columns:
        merge_cols += ['package_code', 'product_no']

    df_merged = pd.merge(df_bom, df_last, on=merge_cols, how='left')
    return df_merged


def run(input_path, output_dir):
    """
    Entry point ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô PNP_CHANG_TYPE
    """
    print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PNP_CHANG_TYPE")
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå WF size ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        wf_files = glob.glob(os.path.join(input_path, "WF size*"))
        
        if wf_files:
            print(f"üìÅ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå WF size {len(wf_files)} ‡πÑ‡∏ü‡∏•‡πå")
            # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Last_Type.xlsx ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå WF
            df_result = run_all_years(input_path, output_dir)
            return df_result
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ lookup BOM
            excel_files = glob.glob(os.path.join(input_path, "*.xlsx")) + glob.glob(os.path.join(input_path, "*.xls"))
            
            if excel_files:
                print(f"üìÅ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel {len(excel_files)} ‡πÑ‡∏ü‡∏•‡πå - ‡∏à‡∏∞‡∏ó‡∏≥ lookup")
                result_df = lookup_last_type(excel_files[0], output_dir)
                
                if result_df is not None:
                    output_file = os.path.join(output_dir, "PNP_CHANG_TYPE_result.xlsx")
                    result_df.to_excel(output_file, index=False)
                    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {output_file}")
                    
                return result_df
            else:
                raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå WF size ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ")
        
    except Exception as e:
        print(f"‚ùå Error in run: {e}")
        raise e




